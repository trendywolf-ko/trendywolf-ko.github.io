<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hux Blog</title>
    <description>这里是 @Hux黄玄 的个人博客，与你一起发现更大的世界 | 要做一个有 swag 的程序员</description>
    <link>https://huangxuan.me/</link>
    <atom:link href="https://huangxuan.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 08 Aug 2023 11:03:30 -0500</pubDate>
    <lastBuildDate>Tue, 08 Aug 2023 11:03:30 -0500</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
      <item>
        <title>연준 금리 인상, 노동 시장, 인플레이션 관리, 주식 시장 </title>
        <description>&lt;p&gt;노동시장이 목표치를 향해 나아가고 인플레이션이 통제 가능한 수준을 유지함에 따라 연준은 금리 인상을 중단할 수 있습니다. 강력한 경제 성장과 추가 확대 가능성으로 주식 시장에 대한 긍정적인 전망. 현재 상황에 대한 종합적인 분석을 바탕으로 정보를 파악하고 투자 결정을 내리세요.&lt;/p&gt;

&lt;h2 id=&quot;연준-금리-인상-중단-가능성&quot;&gt;연준, 금리 인상 중단 가능성&lt;/h2&gt;

&lt;p&gt;최근 데이터에 따르면 연방준비제도(Fed)가 금리 인상을 보류할 가능성이 있습니다. 노동 시장 데이터에 따르면 일자리 창출은 감소 추세를 보이고 있으며 실업률은 약 3.5%로 안정적으로 유지되고 있습니다. 이러한 노동 시장의 점진적인 재균형은 연준의 목표와 일치합니다. 또한 구인 공고는 감소하고 있어 고용이 둔화될 가능성이 있는 반면, 노동 참여율은 증가하여 더 많은 사람들이 노동시장에 진입하거나 재진입하고 있음을 보여줍니다. 임금 상승률도 연준이 원하는 수준에 근접한 4.4%로 양호한 수준을 유지하고 있습니다. 이러한 모든 요소는 노동 시장이 연준의 목표를 향해 나아가고 있음을 나타내며 금리 인상을 일시 중지 할 이유를 제공합니다.&lt;/p&gt;

&lt;p&gt;인플레이션 데이터도 금리 인상 중단을 뒷받침합니다. 연준은 약 2%의 인플레이션율을 목표로 하고 있으며, 현재 데이터는 연준의 목표와 일치합니다. 인플레이션이 통제되고 있기 때문에 연준은 통화정책을 추가로 긴축할 필요성을 당장 느끼지 않을 수 있습니다. 이는 대출 및 모기지 금리가 가까운 장래에 인상되지 않을 수 있음을 의미하므로 대출자에게는 좋은 소식입니다.&lt;/p&gt;

&lt;h2 id=&quot;주식-시장에-대한-긍정적인-전망&quot;&gt;주식 시장에 대한 긍정적인 전망&lt;/h2&gt;

&lt;p&gt;전문가들은 또한 주식 시장에 대해 긍정적인 전망을 제시합니다. 이들은 이러한 낙관론의 주요 동인으로 경제 성장을 강조합니다. 애틀랜타 연준의 3분기 국내총생산(GDP) 성장률 전망치는 3.9%로 지난 2분기보다 개선된 것으로 나타났습니다. 이러한 GDP 성장률의 가속화는 기업에게 긍정적인데, 이는 실적 개선으로 이어져 궁극적으로 주가를 끌어올릴 수 있기 때문입니다.&lt;/p&gt;

&lt;p&gt;금융주 역시 최근 기술주를 앞지르며 좋은 성과를 거두고 있습니다. 그 이유 중 하나는 수익률 곡선이 가파르게 상승하여 금융기관에 유리하기 때문입니다. 수익률 곡선이 가파르다는 것은 장기 금리가 단기 금리보다 높아 은행이 대출을 통해 더 많은 수익을 올릴 수 있다는 것을 의미합니다. 이러한 추세는 금융주 강세에 기여했습니다.&lt;/p&gt;

&lt;p&gt;또한 전문가들은 주식 시장이 더 확대될 가능성이 있다고 언급합니다. 그들은 큰 경기 침체 없이 경제 성장률이 점진적으로 둔화되는 연착륙을 예상하고 있습니다. 이는 대규모 디폴트 위험을 줄이고 안정성을 제공하므로 시장에 긍정적으로 작용할 것입니다. 또한 수익률이 더 하락할 가능성도 있어 주식에 도움이 될 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;마감-성명&quot;&gt;마감 성명&lt;/h2&gt;

&lt;p&gt;결론적으로, 데이터는 연준이 금리 인상을 중단할 가능성을 뒷받침하며, 이는 대출자에게 긍정적인 영향을 미칠 수 있습니다. 주식 시장도 강한 경제 성장과 특히 금융 부문의 주식에 긍정적인 요인으로 강세를 보이고 있습니다. 하지만 시장 상황은 급변할 수 있으므로 항상 최신 정보를 파악하고 현재 상황에 대한 종합적인 분석을 바탕으로 투자 결정을 내리는 것이 현명하다는 점을 명심해야 합니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Aug 2023 00:00:00 -0500</pubDate>
        <link>https://huangxuan.me/2023/08/08/8883-ko/</link>
        <guid isPermaLink="true">https://huangxuan.me/2023/08/08/8883-ko/</guid>
        
        <category>연준 금리 인상</category>
        
        <category>노동 시장</category>
        
        <category>인플레이션 관리</category>
        
        <category>주식 시장</category>
        
        
      </item>
    
      <item>
        <title>연준 금리 인상, 노동 시장, 주식 시장, 금융 </title>
        <description>&lt;p&gt;실업률이 낮아지고 노동 참여율이 증가하는 등 노동 시장이 재균형에 대한 긍정적인 신호를 보임에 따라 연준의 금리 인상이 일시 중지될 수 있습니다. 경제 성장은 주식 시장의 확장세를 이끌고 기업들에게 혜택을 주며 잠재적으로 주가 상승으로 이어질 것으로 예상됩니다. 최근 수익률 곡선의 가파른 상승과 주요 채무 불이행의 부재에 힘입어 금융이 좋은 성과를 거두었습니다. 전반적으로 연준의 금리 인상과 주식 시장 모두에 긍정적인 신호가 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;연준의-금리-인상-금리-인상이-일시-중지될까요&quot;&gt;연준의 금리 인상: 금리 인상이 일시 중지될까요?&lt;/h2&gt;

&lt;p&gt;한 전문가에 따르면, 데이터에 따르면 연방준비제도(Fed)가 금리 인상을 보류하거나 일시 중지할 수 있다고 합니다. 이는 특히 노동 시장 상황을 통해 뒷받침됩니다. 일자리 창출은 감소 추세에 있지만 실업률은 약 3.5%로 낮은 수준을 유지하고 있습니다. 이러한 노동 시장의 점진적인 재균형은 연준에게 긍정적인 결과로 여겨지고 있습니다. 또한 노동 참여율이 증가하고 있으며 주요 연령대 근로자의 경우 팬데믹 이전 수준을 상회하고 있습니다. 이는 더 많은 사람들이 노동시장에 진입하거나 재진입하고 있음을 나타내며, 이는 또 다른 긍정적인 신호입니다. 또한 임금 상승률은 4.4%로 연준의 목표에 충분히 근접하고 있습니다. 이러한 모든 요인이 결합되어 전문가들은 연준이 금리 인상을 일시 중지 할 수 있다고 믿습니다.&lt;/p&gt;

&lt;h2 id=&quot;주식-시장-성장의-한-해&quot;&gt;주식 시장: 성장의 한 해&lt;/h2&gt;

&lt;p&gt;전문가에 따르면 주식 시장은 좋은 한 해를 보냈으며 계속해서 가능성을 보여주고 있습니다. 그 이유 중 하나는 경제 성장에 대한 기대감입니다. 애틀랜타 연준의 3분기 국내총생산(GDP) 예상치는 3.9%로, 1분기와 2분기보다 양호하고 컨센서스 예상치보다 가속도가 붙었습니다. 이러한 긍정적인 경제 성장은 기업들에게 도움이 될 것으로 예상되며, 이는 실적 업그레이드 사이클과 잠재적인 주가 상승으로 이어질 것입니다. 또한 전문가는 최근 재무 실적이 좋았다고 언급합니다. 이는 부분적으로 수익률 곡선이 가파르게 상승하고 있기 때문이며, 이는 금융업에 긍정적입니다. 주요 채무 불이행이 없고 수익률이 더 하락할 가능성이 낮다는 점도 금융업에 대한 긍정적인 전망에 기여합니다. 전반적으로 시장의 확장세가 지속될 것이라고 믿을 만한 이유가 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;마감-성명&quot;&gt;마감 성명&lt;/h2&gt;

&lt;p&gt;결론적으로, 데이터는 연준이 금리 인상을 일시 중단할 수 있다는 생각을 뒷받침합니다. 노동 시장은 낮은 실업률과 노동 참여율 증가로 점진적으로 균형을 되찾고 있습니다. 임금 상승률도 연준의 목표에 근접하고 있습니다. 주식 시장의 경우, 경제 성장은 기업들에게 혜택을 주고 잠재적으로 주가 상승으로 이어질 것으로 예상됩니다. 최근 금융시장은 수익률 곡선이 가파르게 상승한 덕분에 좋은 성과를 거두었습니다. 주요 채무불이행이 없고 수익률이 더 하락할 가능성이 낮다는 점도 금융에 대한 긍정적인 전망에 기여하고 있습니다. 전반적으로 연준의 금리 인상과 주식 시장 모두에 긍정적인 신호가 있습니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Aug 2023 00:00:00 -0500</pubDate>
        <link>https://huangxuan.me/2023/08/08/4773-ko/</link>
        <guid isPermaLink="true">https://huangxuan.me/2023/08/08/4773-ko/</guid>
        
        <category>연준 금리 인상</category>
        
        <category>노동 시장</category>
        
        <category>주식 시장</category>
        
        <category>금융</category>
        
        
      </item>
    
      <item>
        <title>인플레이션 목표와 경제 성장: 정책 실수의 영향과 주의점</title>
        <description>&lt;ul&gt;
  &lt;li&gt;주제: 인플레이션 목표에 대한 정책 실수와 그에 따른 경제 성장에 대한 영향&lt;/li&gt;
  &lt;li&gt;근거: 추가 인상을 예상하고 있는 정책 실수는 경제 성장에 불필요한 결과를 초래할 수 있음&lt;/li&gt;
  &lt;li&gt;결론: 2% 인플레이션 목표에 빨리 도달하기 위해 정책 실수를 할 경우, 공급 측면과 노동 시장 등에서 혼란을 겪을 수 있으며, 필요한 것보다 많은 수요를 위축시킬 수 있음&lt;/li&gt;
  &lt;li&gt;추가 내용: 연준과 영란 은행은 인플레이션 목표에 대한 논의를 시작하기를 원하지 않으며, 신뢰성을 확립하기 위해 논의를 미루고 있는 상황임&lt;/li&gt;
  &lt;li&gt;다른 측면: 취약한 경제와 금융 부문에서 여전히 많은 일이 일어나고 있으며, 상업용 부동산에 대한 재융자는 천천히 일어나야 하므로 조심해야 함&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 21 Jul 2023 00:00:00 -0500</pubDate>
        <link>https://huangxuan.me/2023/07/21/inflegro/</link>
        <guid isPermaLink="true">https://huangxuan.me/2023/07/21/inflegro/</guid>
        
        <category>인플레이션목표</category>
        
        <category>정책실수</category>
        
        <category>경제성장</category>
        
        <category>인플레이션목표논의미루기</category>
        
        
      </item>
    
      <item>
        <title>연착륙 내러티브 모멘텀</title>
        <description>&lt;p&gt;이번 주에는 채권과 주식 시장이 실행될 것이다. 인플레이션은 2%로 유지되거나 가속화될 것으로 예상된다. 서비스 인플레이션에 따라 인플레이션 경로가 결정될 것이다. 연착륙 내러티브는 모멘텀을 가지고 있으며, CPI와 BPI는 연착륙 내러티브에 관련된다. 네덜란드 말은 연방 준비 은행의 정책에 대한 견해를 변경했으며, 인플레이션은 부드럽게 진행될 것이지만 노동 시장과 주택 시장의 위험은 여전히 존재한다. 연착륙 소프트 인플레이션 이야기는 경제에 긍정적인 영향을 준다.&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Jul 2023 00:00:00 -0500</pubDate>
        <link>https://huangxuan.me/2023/07/21/inflation/</link>
        <guid isPermaLink="true">https://huangxuan.me/2023/07/21/inflation/</guid>
        
        <category>연착륙</category>
        
        <category>내러티브</category>
        
        <category>모멘텀</category>
        
        
      </item>
    
      <item>
        <title>연준 회의를 앞두고 조용한 시기, 혼란스러운 데이터 덤프에서 경제 확인: 다가오는 회의에서의 연준의 행동은?</title>
        <description>&lt;ul&gt;
  &lt;li&gt;주제: 연준의 중요성과 연방 기금 금리의 실질적인 인상&lt;/li&gt;
  &lt;li&gt;근거: 연준 회의를 앞두고 조용한 시기, 혼란스러운 데이터 덤프에서 경제 확인&lt;/li&gt;
  &lt;li&gt;결론: 다가오는 회의에서 아마도 아무것도 하지 않을 것으로 예상되며, 앞으로 연준의 행동을 지켜봐야 함&lt;/li&gt;
  &lt;li&gt;추가 정보: RBA의 하이킹 예시를 통해 경제의 탄력성과 연준의 역할 강조&lt;/li&gt;
  &lt;li&gt;수익 불황에 대비하는 경향과 수익 기대치의 개선으로 시장 개선됨을 언급&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 21 Jul 2023 00:00:00 -0500</pubDate>
        <link>https://huangxuan.me/2023/07/21/fedmeeting/</link>
        <guid isPermaLink="true">https://huangxuan.me/2023/07/21/fedmeeting/</guid>
        
        <category>연준</category>
        
        <category>연방기금금리</category>
        
        <category>경제확인</category>
        
        <category>RBA</category>
        
        
      </item>
    
      <item>
        <title>연준의 중요성과 다가오는 회의의 예상</title>
        <description>&lt;ul&gt;
  &lt;li&gt;주제: 연준의 중요성에 대한 의견&lt;/li&gt;
  &lt;li&gt;근거: 연준 회의를 앞두고 조용한 시기이지만, 연방 기금 금리의 실질적인 인상을 예상하여 가격을 책정하고 있음&lt;/li&gt;
  &lt;li&gt;결론: 다가오는 회의에서 아마도 아무것도 하지 않을 것으로 예상되며, 앞으로 연준의 움직임을 지켜봐야 함&lt;/li&gt;
  &lt;li&gt;추가 정보: RBA의 예시를 들어 몇 달 동안 멈추었다가 다시 하이킹을 하는 경향을 보이고 있음&lt;/li&gt;
  &lt;li&gt;경제의 탄력성과 연준의 역할에 대한 의견&lt;/li&gt;
  &lt;li&gt;시장을 이끄는 요인으로 수익 기대치가 개선되고 있음&lt;/li&gt;
  &lt;li&gt;사람들이 숨을 쉬고 있다는 것을 알기 때문에 이것은 복사본일 가능성이 있음&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 21 Jul 2023 00:00:00 -0500</pubDate>
        <link>https://huangxuan.me/2023/07/21/Fedcom/</link>
        <guid isPermaLink="true">https://huangxuan.me/2023/07/21/Fedcom/</guid>
        
        <category>연준</category>
        
        <category>중요성</category>
        
        <category>금리인상</category>
        
        <category>경제탄력성</category>
        
        
      </item>
    
      <item>
        <title>My Programming Languages Spectrum</title>
        <description>&lt;iframe id=&quot;chart&quot; src=&quot;https://huangxuan.me/PL-chart/&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;width: 100%&quot;&gt;
&lt;/iframe&gt;
</description>
        <pubDate>Tue, 05 May 2020 00:00:00 -0500</pubDate>
        <link>https://huangxuan.me/2020/05/05/pl-chart/</link>
        <guid isPermaLink="true">https://huangxuan.me/2020/05/05/pl-chart/</guid>
        
        
      </item>
    
      <item>
        <title>Vim 与中文输入法</title>
        <description>&lt;p&gt;Update: 我最后还是放弃把 Vim 作为主要编辑器来输入中文了，整体使用下来 mental model 的 cost 太重了。记笔记时用用中文呀或者改改博客时偶尔用一下还蛮去，这个时候这个功能至少能帮助你 Esc 之后不煞笔，所以也不算完全没有价值吧……&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我相信很多中文世界的 Vimer 都遇到过这个烦恼，在 vim 的 insert 模式时可能突然想输个中文，输完之后会本能的直接 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esc&lt;/code&gt; 接 normal 模式操作，结果发现跳出来的是中文输入法……对于 vscode，我一般会在几次错误之后被逼到退出 vscode vim 模式，而对于终端中用的 neovim，就只能尽量不输入中文了。&lt;/p&gt;

&lt;p&gt;为了满足我 1% 用 vim 输入中文的场景（比如写博客），我还是想看看有没有什么解决方案，Google 出来的解决方案基本是：&lt;em&gt;在退出 insert 模式时记住当时的输入法，并自动切换到默认输入法（一般是英文）给 normal 模式用，并且在下一次进入 insert 模式时再切换回来。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;原生 vim 的话，可以使用 &lt;a href=&quot;https://github.com/ybian/smartim&quot;&gt;smartim&lt;/a&gt; 插件，原理是调用 &lt;a href=&quot;https://github.com/daipeihust/im-select&quot;&gt;im-select&lt;/a&gt; 这个 CLI 工具来切换输入法。&lt;/p&gt;

&lt;p&gt;对于 VSCode-vim 的话，smartim 的移植也在近期的 PR 中被 merge 到了插件里，&lt;a href=&quot;https://github.com/VSCodeVim/Vim#use-im-select&quot;&gt;详情见文档的这部分配置&lt;/a&gt;，需要指定一下默认输入法和 im-select 的 binary 路径就好。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;
不过实话说，在 vim 中编辑中文的效率和体验和英文比都是大打折扣的。因为中文分词难度太高，不像英文可以简单依靠一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;split &quot; &quot;&lt;/code&gt; 搞定。所以其实无论 vim（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w&lt;/code&gt;ord，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;egin，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt;nd），emacs 还是操作系统自带的（比如 macOS 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alt + 箭头&lt;/code&gt;） 「按词移动」功能对于中文都仅仅是跳转到下一个空格处而已，对于中文来说基本就是下一句了……其他常用操作诸如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt;eplace, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt;ill 也都无法很好的工作，基本只能靠 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hjkl&lt;/code&gt; 爬行……&lt;/p&gt;

&lt;p&gt;不过也算聊胜于无吧，由于我的主力外置键盘是 HHKB，能用 vim 操作的一个子集（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hjkl&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt; etc.）可能也比按住 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fn&lt;/code&gt; 的方向键好用……&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Oct 2018 00:00:00 -0500</pubDate>
        <link>https://huangxuan.me/2018/10/06/vim-cn-im/</link>
        <guid isPermaLink="true">https://huangxuan.me/2018/10/06/vim-cn-im/</guid>
        
        <category>Vim</category>
        
        
      </item>
    
      <item>
        <title>Avoiding success at all cost</title>
        <description>&lt;p&gt;“Avoiding success at all cost” is the informal motto behinds &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt;. It could be parenthesized in two ways, either “Avoiding (success at all cost)” or “(Avoiding sucess) (at all cost)”.&lt;/p&gt;

&lt;p&gt;I’m not going to interpret them directly but rather to share some thoughts on “the success vs. costs” basing on my very own understanding and experience.&lt;/p&gt;

&lt;h3 id=&quot;the-success-vs-cost-of-language-design&quot;&gt;The success vs. cost of language design&lt;/h3&gt;

&lt;p&gt;There’re always trade offs (or compromises) in any software design, and programming language design has no exceptions.&lt;/p&gt;

&lt;p&gt;In other words, all language design decision that made them “successful” i.e. being popular and widely-used in industry or education for some reasons, all comes with their own “costs”: being unsafe, limited expressiveness, or having bad performance, etc.&lt;/p&gt;

&lt;p&gt;Whether or not the “cost” is a problem really depends on scenarios, or their goals. For instances, Python/JavaScript are both very expressive and beginner-friendly by being dynamically-typed, sacrifing the type safety and performance. Java, in constrast, uses a much safer and optimization-friendly type system but being much less expressive. Another typicial comparison would be memory management in programming languages, where languages that are “managed” (by either ARC or Gabage Collector) could be much easier and safer (in terms of memory) for most programmers but also considerred slower than languages that are “closer to the metal”.&lt;/p&gt;

&lt;p&gt;None of these “costs”, or “differences”, really prevent them from being immortally popular.&lt;/p&gt;

&lt;p&gt;For Haskell, the story becomes quite different: being research-oriented means the goal of this language is to pursue some “ultimate” things: the “ultimate” simplicity of intermediate representation, the “ultimate” type system where safety and expressiveness can coexist, the “ultimate” compilation speed and runtime performance, the “ultimate” concise and elegant concrete syntax, the “ultimate”…I don’t know. But it has to be some “ultimate” things that is very difficult, probably endless and impossible, to achieve.&lt;/p&gt;

&lt;p&gt;This, as a result, made all language decisions in Haskell became very hard and slow, because &lt;strong&gt;almost nothing can be scarified&lt;/strong&gt;. That’s why Haskell insisted to be lazy to “guard” the purity regardless of some problems of being “call-by-need”; a decent IO mechanisms is missing in the first 4 yrs after the project’s start until P Walder found &lt;em&gt;Monad&lt;/em&gt;; and the &lt;em&gt;Type Class&lt;/em&gt;, which is first proposed in P Walder’s 1989 paper, spent yrs long to implement and popularize.&lt;/p&gt;

&lt;p&gt;As a side note though, it doesn’t mean there is no compromise in Haskell at all. It’s just as minimized as it could be during its progress. When one audience asking why we have Haskell and OCaml, which’re quite similar in very high level, both survived, SPJ replies:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There’s just a different set of compromises.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;the-success-vs-cost-of-language-design-process&quot;&gt;The success vs. cost of language design process&lt;/h3&gt;

&lt;p&gt;Another common but extremely controversial (if not the most) topics of programming language design is about its design process: Would you prefer dictatorship or a committee (in other words, a dictatorship of many?)? Would you prefer being proprietary or standardized? In which form would you write the standards, in human nature language, pseudo code, or formal semantics? How many and how frequently breaking changes dare you make? Would you let open source community involve in?&lt;/p&gt;

&lt;p&gt;Again, I think there is no THE answer for all those questions. Majority of popular programming languages came and are still on going with very different paths.&lt;/p&gt;

&lt;p&gt;Python, whose creater, Guido van Rossum, known as the “Benevolent Dictator For Life” (BDFL), i.e. good kind of dictator, still play the central role (until July 2018) of the Python’s development after Python getting popular and adapt a open source and community-based development model. This factor direcly contribute to the fact that Python 3, as a breaking (not completely backward-compatible and not easy to port) but good (in terms of language design and consistency) revision of the language can still be landed, despite of many communities’ pressures. There’re many language (Ruby, Perl, Elm) also choose to follow this route.&lt;/p&gt;

&lt;p&gt;JavaScript, widely known as being created by Brendan Eich in 10 days, in comparision, quickly involved into a committee (TC39) and standardized (ECMAScript) language due to both the open nature of the Web and fast adoption of itself. But Brendan, as the creater, wasn’t even powerful enough to push the committee landing ES4, which is also a breaking but much better revision, but ended up with the ES5 (Harmony), a backward-compatible, yet much less ambitious version due to many political “fights” between different parties (e.g. Mozilla, Microsoft, Yahoo etc.) thus the history wasn’t changed. Even the latest rising and yearly releasing of the “modern” JavaScript (ES6 or ES2015, 2016, 2017…) are mainly driven by the new generation of committee parties (+ Google, Facebook, Airbnb etc.) and still in a very open and standardized way.&lt;/p&gt;

&lt;p&gt;As you can see here, even the history and progress of two rather similar languages can be so different, not to mention more proprietary languages such as Java from Sun/Oracle, C# from Microsoft, OC/Swift from Apple (though the latter was open sourced) or more academia and standardized language like SML and Scheme which both has a standard written in formal semantics.&lt;/p&gt;

&lt;p&gt;So it’s not not obvious that Haskell, also chose its own unique process to suit its unique goal. Although it backs on academia, it chose a rather practical/less-formal approach to define the language, i.e. the compiler implementation over standardization (plus many “formal” fragments among papers though), which is more like C++/OCaml from this point of view. It has a committee, but instead of being very open and conservative, it’s more dictatorial (in terms of average users) and super aggressive in terms of making breaking changes. As a result however, it trained a group of very change-tolerant people in its community…All of these quirks and odds combined works very well and avoid the Haskell “becoming too success too quickly”.&lt;/p&gt;

&lt;h3 id=&quot;end-thoughts&quot;&gt;End thoughts&lt;/h3&gt;

&lt;p&gt;To be fair, Haskell has alreay been very “successful” nowdays, in particular academia (for education, sexy type laboratory etc.) but also industry, either being used in real business or being very reputable among programmers (as being both hard and fun).&lt;/p&gt;

&lt;p&gt;I am not confident and qualified to say Haskell is success in the right degree at the right time. But it’s great to see it, after more than 20 and now almost 30 yrs, slowly figure out its very own way, to “Escape from the Ivory Tower”, and keep going beyond.&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Sep 2018 00:00:00 -0500</pubDate>
        <link>https://huangxuan.me/2018/09/27/avoiding-success-at-all-cost/</link>
        <guid isPermaLink="true">https://huangxuan.me/2018/09/27/avoiding-success-at-all-cost/</guid>
        
        <category>Haskell</category>
        
        <category>笔记</category>
        
        <category>En</category>
        
        
      </item>
    
      <item>
        <title>JavaScript 模块化七日谈</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;下滑这里查看更多内容&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该 Slides 分享到了微博上。出乎意料地，这篇微博先后被 @JS小组 @尤小右 @寸志 等近 200 人转发，阅读达到 10w，获得了还不错的评价。&lt;/p&gt;

&lt;p&gt;于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote 展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验&lt;/p&gt;

&lt;h3 id=&quot;watch-fullscreen-&quot;&gt;&lt;a href=&quot;https://huangxuan.me/js-module-7day/&quot;&gt;Watch Fullscreen →&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;visible-md visible-lg&quot;&gt;
&lt;img src=&quot;//huangxuan.me/js-module-7day/attach/qrcode.png&quot; width=&quot;350&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;你也可以通过扫描二维码在手机上观看&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;这个 Web Slides 开源在&lt;a href=&quot;https://github.com/Huxpro/js-module-7day&quot;&gt;我的 Github 上&lt;/a&gt;，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork &amp;amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star 一下这个项目&lt;/p&gt;

&lt;h3 id=&quot;catalog&quot;&gt;Catalog&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;第一日 上古时期 &lt;strong&gt;&lt;em&gt;Module?&lt;/em&gt;&lt;/strong&gt; 从设计模式说起&lt;/li&gt;
  &lt;li&gt;第二日 石器时代 &lt;strong&gt;&lt;em&gt;Script Loader&lt;/em&gt;&lt;/strong&gt; 只有封装性可不够，我们还需要加载&lt;/li&gt;
  &lt;li&gt;第三日 蒸汽朋克 &lt;strong&gt;&lt;em&gt;Module Loader&lt;/em&gt;&lt;/strong&gt; 模块化架构的工业革命&lt;/li&gt;
  &lt;li&gt;第四日 号角吹响 &lt;strong&gt;&lt;em&gt;CommonJS&lt;/em&gt;&lt;/strong&gt; 征服世界的第一步是跳出浏览器&lt;/li&gt;
  &lt;li&gt;第五日 双塔奇兵 &lt;strong&gt;&lt;em&gt;AMD/CMD&lt;/em&gt;&lt;/strong&gt; 浏览器环境模块化方案&lt;/li&gt;
  &lt;li&gt;第六日 精灵宝钻 &lt;strong&gt;&lt;em&gt;Browserify/Webpack&lt;/em&gt;&lt;/strong&gt; 大势所趋，去掉这层包裹！&lt;/li&gt;
  &lt;li&gt;第七日 王者归来 &lt;strong&gt;&lt;em&gt;ES6 Module&lt;/em&gt;&lt;/strong&gt; 最后的战役&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;thanks&quot;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://lab.hakim.se/reveal-js&quot;&gt;Reveal.js&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jul 2015 00:00:00 -0500</pubDate>
        <link>https://huangxuan.me/2015/07/09/js-module-7day/</link>
        <guid isPermaLink="true">https://huangxuan.me/2015/07/09/js-module-7day/</guid>
        
        <category>Slides</category>
        
        <category>Web</category>
        
        <category>JavaScript</category>
        
        
      </item>
    
  </channel>
</rss>
